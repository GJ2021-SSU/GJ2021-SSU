import pygame


class Buttons:
    """ Buttons the Player can click with their mouse. """

    def __init__(self, x, y, width, height, pause=False):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.Pause = pause


class Camera:

    def __init__(self, width, height):
        self.rect = pygame.Rect(0, 0, width, height)
        self.width = width
        self.height = height

    def apply(self, obj):
        return obj.rect.move(self.rect.topleft)

    def update(self, player):
        x = -player.x + player.size // 2
        y = -player.y + player.size // 2
        self.rect = pygame.Rect(x, y, self.width, self.height)


class Player:
    """ The Player object. """

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.new_x = x
        self.new_y = y
        self.size = 50
        self.x_speed = 200
        self.y_speed = 0
        self.x_acceleration = None
        self.y_acceleration = 400
        self.hitbox = pygame.Rect(self.x, self.y, self.size, self.size)
        self.on_ground = True
        self.double_jump = True

    def update(self, event, keys, dt, room):
        # Hitbox Update
        self.hitbox = pygame.Rect(self.x, self.y, self.size, self.size)
        self.new_x = self.x
        self.new_y = self.y

        # Player Input
        if keys[pygame.K_d] or keys[pygame.K_RIGHT]:
            self.new_x += self.x_speed * dt
        if keys[pygame.K_a] or keys[pygame.K_LEFT]:
            self.new_x -= self.x_speed * dt

        if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            if self.on_ground:
                # JUMP MECHANIC NEEDS ADJUSTING FOR DIFFERING FRAMERATE #
                self.y_speed = -400
                self.double_jump = True
            elif self.double_jump:
                self.y_speed = -400
                self.double_jump = False

        # Y - Level Update
        self.y_speed += self.y_acceleration * dt
        self.new_y += self.y_speed * dt

        # Collision Update
        platform_list = room[0]
        x_collision = False
        y_collision = False
        self.on_ground = False

        # X - Collision
        self.hitbox = pygame.Rect(self.new_x, self.y, self.size, self.size)
        for p in platform_list:
            if p.colliderect(self.hitbox):
                x_collision = True
                break
        if not x_collision:
            self.x = self.new_x

        # Y - Collision
        self.hitbox = pygame.Rect(self.x, self.new_y, self.size, self.size)
        for p in platform_list:
            if p.colliderect(self.hitbox):
                y_collision = True
                self.y_speed = 0
                if p[1] >= self.new_y:
                    self.on_ground = True
                    self.double_jump = True
                if p[1] > self.y + self.size:
                    self.y = p[1] - self.size
                break
        if not y_collision:
            self.y = self.new_y

        # Item Collision
        self.hitbox = pygame.Rect(self.x, self.y, self.size, self.size)

    def draw(self, surface, image_list, debug=False):
        pygame.draw.rect(surface, (100, 100, 255), self.hitbox, 1)

        if debug:
            pygame.draw.rect(surface, (255, 50, 50), self.hitbox, 1)
            pygame.draw.circle(surface, (255, 255, 255), (self.x, self.y), 1, 0)
